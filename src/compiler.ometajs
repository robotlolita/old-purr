ometa PurrCompiler {
  compileKw = [[#kw :a] compile:b] -> [a, b],
  compile = [#id :a]                                   -> a
          | [#kw :a]                                   -> a
          | [#sym :a]                                  -> a
          | [#prop :a]                                 -> makeProperty(a)
          | [#number :a]                               -> makeNumber(a)
          | [#string :a]                               -> makeString(a)
          | [#vector [compile*:as]]                    -> makeVector(as)
          | [#object [compile*:ps]]                    -> makeObject(ps)
          | [#patternKw [compileKw*:as] compile:a]     -> makeKwPattern(as, a)
          | [#pattern1  compile:a compile:b]           -> make1Pattern(a, b)
          | [#pattern2  compile:a compile:b compile:c] -> make2Pattern(a, b, c)
          | [#module [compile*:as] [compile*:bs]]      -> makeModule(as, bs)
          | [#keyword compile:a [compileKw*:bs]]       -> makeKwCall(a, bs)
          | [#binary compile:a compile:b compile:c]    -> makeBinCall(a, b, c)
          | [#unary compile:a compile:b]               -> makeUnCall(a, b)
          | [#clone compile:a compile:b]               -> makeClone(a, b)
}

var string = JSON.stringify

function thunk(a) {
  return '(function(){ return ' + a + ' })'
}

function fn(as, b) {
  return '(function($scope) {'
       + '  return function(' + as.join(', ') + ') {'
       +      as.map(function(a) {
                return '    $scope[' + string(a) + '] = ' + thunk(a) + ';'
              }).join('\n')
       + '    return ' + b
       + '  }'
       + '})($scope.$clone())'
}

function makeNumber(a) {
  return '$runtime.Number.$clone({ $value: ' + a + ' })'
}

function makeString(a) {
  return '$runtime.String.$clone({ $value: ' 
       +    string(a) + '.split("").map(function(a){'
       + '    return $runtime.Character.$clone({ $value: a })'
       + '  })' 
       + '})'
}

function makeVector(as) {
  return '$runtime.List.$clone({ $value: [' + as.join(', ') + '] })'
}

function makeObject(ps) {
  return '(function($scope) {'
       +    ps.map(function(a) {
              return '  $scope[' + string(a[0]) + '] = ' + a[1] + ';'
            }).join('\n')
       + '  return $scope'
       + '}($scope.$clone()))'
}

function makeProperty(a) {
  return '$scope["get-slot"](' + string(a) + ')()'
}

function make1Pattern(a, b) {
  return [a, thunk(b)]
}

function make2Pattern(a, b, c) {
  return [a, fn([b], c)]
}

function makeKwPattern(as, b) {
  var kws = as.map(function(a){ return a[0] + ':' }).join('')
  var vls = as.map(function(a){ return a[1] })
  return [kws, fn(vls, b)]
}

function makeModule(as, b) {
  return 'void function($scope) {'
       + '  module.exports = ' + fn(as, makeObject(b))
       + '}($runtime.Root.$clone())'
}

function makeKwCall(a, bs) {
  var kws = bs.map(function(a){ return a[0] + ':' }).join('')
  var vls = bs.map(function(a){ return a[1] })
  return '(' + a + ')["get-slot"](' + string(kws) + ')(' + vls.join(', ') + ')'
}

function makeBinCall(a, b, c) {
  return '(' + a + ')["get-slot"](' + string(b) + ')(' + c + ')'
}

function makeUnCall(a, b) {
  return '(' + a + ')["get-slot"](' + string(b) + ')()'
}

function makeClone(a, b) {
  return '(' + a + ').$clone(' + b + ')'
}

function makeExprs(as) {
  return as.join(';')
}
 
module.exports = PurrCompiler
